
program = { strit [";;"] };

strit = ( type_decl | exn_decl | value_decl | expr );

exn_decl = ( "exception" lident "=" uident [ "of" core_type ] );

type_decl = ( "type" [ type_params ] lident "="
              ( core_type | record_decl | variant_decl ) );

core_type = ( prim_type
          | type_var
          | "(" core_type / "*" ")"
          | [ type_params ] longident
          | core_type "->" core_type
          )
          ;

prim_type = ( "int" | "float" | "string" | "bool" );

record_decl = ( "{" ( field ":" [ "mutable" ] core_type ) / ";" "}" );

type_params = core_type | ( "(" core_type / "," ")" );

variant_decl = ( uident [ "of" core_type / "*" ] ) / "|" ;

value_decl =
        ( "let" ( (pattern [ ":" core_type ] "=" expr) / "and" )
        | "let" "rec" ( (lident [ ":" core_type ] "=" expr) / "and" ) );

field_assigns = ( (field "=" expr) / ";" );

expr= ( constant
      | longident
      | "(" expr ")"
      | "begin" expr "end"
      | expr / ","
      | expr "::" expr
      | "[" expr / ";" "]"
      | "[|" expr / ";" "|]"
      | "{" field_assigns "}"
      | "{" expr "with" field_assigns "}"
      | "(" expr ":" core_type ")"
      | expr  expr +
      | expr infix_op expr
      | expr "." longident
      | expr "." longident "<-" expr
      | expr "." "(" expr ")"
      | expr "." "(" expr ")" "<-" expr
      | "if" expr "then" expr [ "else" expr ]
      | "while" expr "do" expr "done"
      | "for" lident "=" expr "to" expr "do" expr "done"
      | expr ";" expr
      | "match" expr "with" rules
      | "function" rules
      | "fun" lident + "->" expr
      | "try" expr "with" rules
      | value_decl "in" expr
      | "assert" expr
      | uident expr
      | praefix_op expr
      );

const = ( integer
        | float
        | string
        | character
        | "true"
        | "false"
        | "()"
        | "[]"
        ); 

rules = ( (pattern "->" expr) / "|" );

pattern =
   ( const
   | "_"
   | pattern "as" lident
   | "(" pattern ")"
   | "(" pattern ":" core_type ")"
   | pattern "|" pattern
   | uident pattern
   | pattern / ","
   | pattern "::" pattern
#  | "{" (field "=" pattern) / ";" "}"
   | "[" pattern / ";" "]"
   | "[|" pattern / ";" "|]"
   );
        

longident = ( lident | uident "." longident );
