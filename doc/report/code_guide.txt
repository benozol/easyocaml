#TITLE: Roadmap to Machinery and the Modules of EasyOCaml
#DATE

#MAKETITLE

* Outline

Here is a rough outline of EasyOCaml's machinery (in both the compiler and the
toploop):

 1. Command line flags are evaluated to check the "-easy" flag and an error
    printer, load language level and/or teachpack might be loaded.

 2. ''EzyCamlgrammar'' parses the AST from the input, possibly respecting
    restrictions from the language level => EzyAst.imported_structure

 3. ''EzyGenerate'' generate constrains from the AST (involving type information
    from the default environment and modules loaded by command line or
    teachpacks/language levels).
    This yeilds to a quadrupel ''generated_structure * AtConstrSet.t *
    PostProcess.t * EzyEnv.t'' where
  
      generated_structure :: is the AST annotated with type variables and
      unique identifiers.
  
      AtConstrSet.t :: is a set of constraints on the type variables in the
        AST.
  
      PostProcess.t :: is build gradually while constraint generation and
        contains sets of different types of errors (from ''EzyErrors'') as well
        as checks which can only processed after constraint unification (i.e.
        type annotations)
  
      EzyEnv.t :: is used to keep track of local variables and contains after
        constraint generation information on the global types and values of the
        program.

 4. ''EzyTyping.solve'' trys to solve the generated constrains.  If solving
    succeeds, the program is typed by a type substitution on the type variables
    in the generated AST and the environment and contains type errors otherwise.

 5. The last step, reimporting the ''EzyEnrichedAst.generated_structure'' with
    typing information given by type substition to OCaml's original Typedtree is
    not yet done.  We type the code again with OCaml's original type checker and
    compare the result to verify its correctness.
      

* Details on the modules

** Utilities and miscellaneous

Two rather independend modules for code used in EasyOCaml

 EzyUtils :: contains functionality which is not specific to EasyOCaml, but
   extends the standard library (String, Set, Map), copies code from existing
   Libraries (from Core: Option, Monad, T2, T3, T4) and new code for Logging
   and some more (lexical comparision, tools on functions).

 EzyMisc :: contains EasyOCaml-specific code which is used in different
   locations in the project.

 EzyOcamlmodules :: extensions of the modules used in the standard OCaml system
   (e.g. Location, Path, Longident, Types, ...) as well as sets and maps on
   those.

The rest of the modules contains the code for the EasyOCaml implementation:


** Error reporting

EasyOCaml has sophisticated possibilities to represent errors, to allow as
detailled error reporting as possible.  Furthermore, new error reporting plugins
can be registered.

  EzyErrorReportUtils :: Code for type error slicing (described in Haack &
    Wells), i.e. slicing an AST to only contain nodes from locations given in a
    set, substituting the rest with elipses.

  EzyErrors :: Representation (types) of errors wich can occur in EasyOCaml, as
    well as functions for error plugins to register new error printer.


** Teachpacks and Language Levels

  EzyConfig :: Constants of the teach pack system such as the name of the
    module describing the teach pack or language level and functions to find a
    teach pack or language level in the file system.

  EzyDynload :: Superset of functionality for loading teach packs and language
    levels.

  EzyInstall :: TBD!!!
  
  EzyLang :: ???

  EzySetup :: ???

  EzyTeachpack :: Shortcut to EzyFeatures and settings of the teach pack.
    Actual teach packs should only need to link against this module.

  EzyLangLevel :: Shortcut to EzyFeatures and settings of the language level.
    Actual language levels should only need to link against this module.


** The abstract syntax tree

The following modules contain representation, manipulation, parsing and
restrictions on EasyOCaml's AST.

  EzyFeatures :: In EasyOCaml, the available syntax can be restricted.  The
    represention of those restrictions is described here.

  EzyAsttypes :: Adaption of Asttypes from the standard OCaml system.

  EzyAst :: Representation of the AST in EasyOCaml.  This is a bit overloaden
    as each node is parametrized on some data it contains.  This is ''unit''
    for a parsed tree and typing information (mainly the type variable) for a
    parsed tree after constraint generation.

  EzyCamlgrammar :: The EasyOCaml Parser as a Camlp4 extension of
    ''Camlp4OCamlParser''.  It just deletes some entries in the latter
    (partially depending on the given features.

  EzyEnrichedAst :: This module directly belongs to ''EzyAst'' but we had to
    outsource it because of module dependencies between ''EzyErrors''.  It
    contains
      * definitions of the AST after constraint generation import functions from
      * OCaml's standard Parsetree respecting given
        restrictions from ''EzyFeatures''
      * comparision of two ASTs which is used to compare OCaml's typing and
        EasyOCaml's typing afterwards


** The type constraints

  EzyTypingCoreTypes :: Contains base types for the constaints and their
    generation, closely related to the data described in Haack & Wells (type
    variables, types, type substitutions, intersection types, type
    environments)

  EzyConstraints :: Here are constraints annotated with only one location
    (AtConstr.t) and constraints with sets of locations (Constr.t) defined, as
    well as set and maps of those.  Furthermore a derived environment as
    described in Haack & Wells is defined.

  EzyGenerate :: There is a function for every syntactic category to generate
    constraints and/or errors.


** EasyOCaml typing

  EzyTyping :: Unification of constraint set which yield a substition on the
    variables and error enumeration and minimization as described by Haack &
    Wells.  It furthermore contains the typing functions for structures which
    are used in the compiler and toplevel.

  EzyEnv :: The ''EzyEnv.t'' is the typing environment for EasyOCaml.
    Information on declared types and types of local and global variables is
    hold.  It is build up while constraint generation (''EzyGenerate'') in
    combination with the type variable substition resulting from
    ''EzyTyping.solve''.

